{
  "name": "fireproof",
  "version": "3.0.3",
  "description": "Promises for Firebase objects.",
  "main": "dist/fireproof.js",
  "scripts": {
    "test": "./node_modules/.bin/gulp test"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/casetext/fireproof.git"
  },
  "author": {
    "name": "Harry Schmidt",
    "email": "goldibex@casetext.com"
  },
  "license": "ISC",
  "devDependencies": {
    "chai": "^1.9.2",
    "chai-as-promised": "^4.1.1",
    "firebase": "^2.0.0",
    "gulp": "^3.8.9",
    "gulp-bump": "^0.1.11",
    "gulp-concat": "^2.4.1",
    "gulp-filter": "^1.0.2",
    "gulp-git": "^0.5.3",
    "gulp-help": "^1.3.0",
    "gulp-jsdoc-to-markdown": "^0.1.5",
    "gulp-mocha": "^1.1.1",
    "gulp-rename": "^1.2.0",
    "gulp-tag-version": "^1.1.0",
    "gulp-uglify": "^1.0.2",
    "gulp-wrap": "^0.5.0",
    "kew": "^0.4.0",
    "mocha": "^1.21.5",
    "rimraf": "^2.2.8"
  },
  "readme": "\nfireproof\n=========\n\nFirebase runs hot! Don't burn yourself with callbacks. Use promises instead.\nFireproof wraps Firebase objects with lightweight promise support.\n\n## Installation\n```bash\nnpm install --save fireproof\n```\n\n## Usage\n\nSee the API documentation [here.](https://github.com/casetext/fireproof/blob/master/api.md)\n\nThe bottom line is this: all Firebase methods are reproduced on a Fireproof object.\n\nYou can choose to \"bless\" Fireproof with a promise library that follows the deferral model, or any spec-compliant promise constructor. Q.js, Kew, and Angular $q are some examples. Just call Fireproof.bless(Q). If you don't, Fireproof tries to use the native Promise constructor, if available.\n\n- If the corresponding Firebase method has no return value but does something asynchronously, Fireproof returns a promise that fulfills if the interaction succeeds and rejects if an error occurs. This is true of, e.g., ```transaction()```, ```auth()```, ```set()```, ```update()```, ```remove()```, and ```once()```.\n\n- For ```on()```, Firebase returns the callback method that you passed in. Fireproof returns your _wrapped_ callback method with an extra method, ```then()```, attached. So the callback is effectively a promise!\n\n- For ```push()```, Firebase returns the reference to the new child. Fireproof does the same, but the reference is also a promise that resolves if the push\nsucceeds and rejects if the push fails.\n\n- All Fireproof objects are themselves promises. Except for the case of\n```push()``` mentioned above, their then() is a shortcut for\n```fp.once('value')```. This means you can get the value of any Fireproof object\nat any time just by treating it as a promise!\n\n```javascript\nvar Fireproof = require('fireproof'),\n  Firebase = require('firebase');\n\nvar fb = new Firebase('https://test.firebaseio.com/thing'),\n  fp = new Fireproof(fb);\n\nfireproof.auth('my_auth_token').then(function() {\n  console.log('Successfully authenticated.')\n}, function(err) {\n  console.error('Error authenticating to Firebase!');\n})\n```\n\n## Support\n\nIE back to 9.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/casetext/fireproof/issues"
  },
  "_id": "fireproof@3.0.3",
  "dist": {
    "shasum": "373f8deea157708139b86ff27c695f1a73a0b74b"
  },
  "_from": "fireproof@",
  "_resolved": "https://registry.npmjs.org/fireproof/-/fireproof-3.0.3.tgz"
}
